FORM VALIDATION:
    - FORM LOG IN; FROM SIGN IN; 
    - CÁC CẢNH BÁO KHI HÀNH ĐỘNG SAI NHƯ NHẬP SAI MÀ TAGER RA NGOÀI.
    - CẢNH BÁO SẼ ĐƯỢC GỌI Ở FORM-MANAGED.
    - TAGER:
        - create a file validator: sử dụng lại nhiều lần.
        - chỉ cần sử dụng trường id để sử dụng lại file validator cho các form tương tự.
    - BEGIN:
        - tạo thẻ js có validator truyền vào một {} ==> {
            form: '#form-1',
            rules: [
              validator.isRequired('#fullname'),
              validator.isEmail('#email'),
            ]
        }
        - file validator:
            - Hai Phan tu:  validator.isRequired
                            validator.isEmail
            - options.rules ==> lấy được ra {} rules   
            - var inputElement để tạo ra elements input khi lập qua bằng forEach 
            - nếu tồn tại inputElement ==> lắng nghe sự kiện onblue của nó:
                - khi onblur:
                - function test:
                - onblur tạo biến errorMessage:
                - hiện lỗi: 
        - Oninput để khi người dùng nhập sẽ ẩn thông báo.
        // Check Email:
            search gg: js email regex   ==> /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
        // Password:
            validator.password('#password',6) ==> với 6 = munber là giá trị độ dài tối thiểu.
- TRƯỜNG HỢP 1 FIELD CÓ NHIỀU RULE:
- handler onsubmit:  
- THỰC TẾ: click vao onsubmit:  
- handler hàm không bắt buộc nhập: ==> như trên thì sẽ trả về object rỗng.
- handler : thẻ inputElement nằm trong các thẻ khác nên parentElement không gặp được thẻ hiện thông báo.
    - Cần lấy ra parentElement có formGroup ở bất cứ cấp nào.
    - tạo hàm getParent:
        - tham số truyền vào: element ( là thẻ inputElement đã có) ; selector ( khai báo để sác định được formGroup là ông nào);
        - dùng vòng lập: while (vòng lập vô hạng với đk if)
- handler checkbox; radio........
    - kiểm tra ở hàm lập các input (validator) ==> ở vòng lập for dùng switch case:
        - switch (inputElement.type) ==> kiểm tra đầu vào
        - khi case là checkbox or radio :
            errorMessage = rules[i](      
                    );
            - lấy ra document.querySelect(rule.selector + ':checked') ==> có checked;
        - default : còn lại 
    - lỗi : không bỏ errorMessage khi oninput:
        - handler:
            - dùng querySelectorAll: cho inputElement tại sự kiện oninput
            - chuyển từ notelist ==> array ==> dùng forEach lập qua : đưa code handler event dom vào vòng forEach.
    - Output ra của from này luôn là giá trị đứng cuối:
        - handler: 
            - dùng switch case khi reduce lập qua các phần tử có property la name
- thẻ selector:
    - logic giống với radio/checkbox:
- thẻ checkbox:
    - Lỗi: k thể nhận hết các giá trị khi dùng checkbox.
    - handler:
        - case riêng cho checkbox:
            - nếu nó là checked:
                - nếu nó k phải array: thì gắn cho key bằng 1 array.
                - key.push array
- File type: